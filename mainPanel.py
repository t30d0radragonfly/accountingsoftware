import _tkinter
from tkinter import *
from tkinter import messagebox
from tkinter.ttk import Treeview
from db import conn_db


class MainPanel:
    def __init__(self, master):
        self.master = master
        self.master.geometry('900x300')
        self.master.title('СЧЕТОВОДСТВО')
        self.docs_btn = Button(self.master, text='ДОКУМЕНТИ', width=30, command=self.click_docs).grid(row=0, column=3, pady=50, padx=50)
        self.vedomost_btn = Button(self.master, text='ОБОРОТНА ВЕДОМОСТ', width=23, command=self.open_general_ledger).grid(row=0, column=4, pady=50, padx=5)
        self.sklad_btn = Button(self.master, text='СКЛАД', width=9, command=self.open_store).grid(row=0, column=5, pady=50, padx=5)
        self.cotragent_btn = Button(self.master, text='КОНТРАГЕНТИ', width=15, command=self.call_contragent).grid(row=0, column=6, pady=50, padx=5)

    def click_docs(self):
        self.documents_show = Toplevel()
        self.documents_show.geometry('900x600')
        self.documents_show.title('Въведени документи:')
        self.main_menu = Menu(self.documents_show)
        self.file_menu = Menu(self.main_menu, tearoff=0)
        self.file_menu.add_command(label='Счетоводна справка')
        self.invoice_menu = Menu(self.file_menu)
        self.file_menu.add_cascade(label='Фактура', menu=self.invoice_menu)
        self.invoice_menu.add_command(label='за продажба', command=self.call_invoice_form_2)
        self.invoice_menu.add_command(label='за покупка', command=self.call_invoice_form)
        self.file_menu.add_command(label='Приходен ордер')
        self.file_menu.add_command(label='Разходен ордер')
        self.main_menu.add_cascade(label='Нов документ', menu=self.file_menu)
        self.documents_show.config(menu=self.main_menu)
        self.tree_view_frame = Frame(self.documents_show)
        docs_named_columns = ('#', 'Вид документ', 'Номер на документ', 'Дата на документ', 'Дан.основа', 'ДДС', 'Сума')
        self.docs_chart = Treeview(self.tree_view_frame, columns=docs_named_columns, show='headings', height=25)
        for get_column in docs_named_columns:
            self.docs_chart.heading(get_column, text=get_column)

        self.docs_chart.bind(self.fetch_data_docs())
        self.docs_chart.column('#', minwidth=0, width=30)
        self.docs_chart.column('Номер на документ', minwidth=0, width=120)
        self.docs_chart.column('Дата на документ', minwidth=0, width=105)
        self.docs_chart.column('Дан.основа', minwidth=0, width=90)
        self.docs_chart.column('ДДС', minwidth=0, width=90)
        self.docs_chart.column('Сума', minwidth=0, width=90)
        self.docs_chart.grid(row=0, column=0)
        self.tree_view_frame.grid(row=2, column=1)

    def fetch_data_docs(self):
        result_docs_db = conn_db.execute('SELECT * FROM inserteddocs').fetchall()
        for row in result_docs_db:
            self.docs_chart.insert("", END, values=row)

# Фактура за покупка
    def call_invoice_form(self):
        self.invoice_form = Toplevel()
        self.invoice_form.geometry('1090x650')
        self.invoice_form.title('Въвеждане на нова фактура за покупка')
        self.button_save_close_frame = Frame(self.invoice_form)
        self.button_save_close_frame.grid(row=0, column=0, sticky=E)
        self.button_save = Button(self.button_save_close_frame, text='Запис', font=6, width=12, height=1, command=self.save_button)
        self.button_save.grid(row=0, column=0, padx=5, pady=3)
        self.button_quit = Button(self.button_save_close_frame, text='Изход', font=6, width=12, height=1, command=self.quit_invoice_form_window)
        self.button_quit.grid(row=0, column=1)

     # Right Frame
        self.right_frame = Frame(self.invoice_form, padx=5, pady=5)
        self.right_frame.grid(row=1, column=0, columnspan=1)
        self.buyer_frame = LabelFrame(self.right_frame)
        self.buyer_frame.grid(row=0, column=0)
        self.buyer_label = Label(self.buyer_frame, text='Купувач:', font=('bold', 16), pady=1)
        self.buyer_label.grid(row=0, column=0, sticky=W)
        self.buyer_name_label = Label(self.buyer_frame, text='    МОЯТА ФИРМА ЕООД', font=14, pady=1)
        self.buyer_name_label.grid(row=1, column=0, sticky=W, ipady=3)
        self.buyer_city_label = Label(self.buyer_frame, text=' Град:  СОФИЯ', font=14, pady=1)
        self.buyer_city_label.grid(row=2, column=0, sticky=W)
        self.buyer_address_label = Label(self.buyer_frame, text=' Адрес:  бул. Витоша 22', font=14, pady=1)
        self.buyer_address_label.grid(row=3, column=0, sticky=W)
        self.buyer_bulstat_label = Label(self.buyer_frame, text=' ИН по БУЛСТАТ:  115115115', font=14, pady=1)
        self.buyer_bulstat_label.grid(row=4, column=0, sticky=W)
        self.buyer_dds_label = Label(self.buyer_frame, text=' ИН по ДДС:  BG 115115115', font=14, pady=1)
        self.buyer_dds_label.grid(row=5, column=0, sticky=W)
        self.mol_label = Label(self.buyer_frame, text=' МОЛ:  ТЕОДОРА ДРАГНЕВА                                      ', font=14, pady=1)
        self.mol_label.grid(row=6, column=0, sticky=W)

      # Left Frame
        self.left_frame = LabelFrame(self.right_frame)
        self.left_frame.grid(row=0, column=2, columnspan=1)
        self.seller_text = StringVar()
        self.seller_label = Label(self.left_frame, text='Продавач:', font=('bold', 16), pady=1)
        self.seller_label.grid(row=0, column=0, sticky=W)
        self.seller_entry = Entry(self.left_frame, width=40, textvariable=self.seller_text)
        self.seller_entry.grid(row=1, column=1, sticky=W)
        self.contragenty_button = Button(self.left_frame, text='Контрагенти', font=14, pady=1, command=self.call_contragent)
        self.contragenty_button.grid(row=1, column=0, sticky=W)
        self.details_city_label = Label(self.left_frame, text='Град:', font=14, pady=1)
        self.details_city_label.grid(row=2, column=0, sticky=W)
        self.details_city_entry = Entry(self.left_frame, width=40)
        self.details_city_entry.grid(row=2, column=1, sticky=W)
        self.details_address_label = Label(self.left_frame, text='Адрес:', font=14, pady=1)
        self.details_address_label.grid(row=3, column=0, sticky=W)
        self.details_address_entry = Entry(self.left_frame, width=40)
        self.details_address_entry.grid(row=3, column=1, sticky=W)
        self.bulstat_text = StringVar()
        self.bulstat_label = Label(self.left_frame, text='ИН по БУЛСТАТ:', font=14, pady=1)
        self.bulstat_label.grid(row=4, column=0,  sticky=W)
        self.bulstat_entry = Entry(self.left_frame, width=40, textvariable=self.bulstat_text)
        self.bulstat_entry.grid(row=4, column=1, sticky=W)
        self.dds_text = StringVar()
        self.dds_label = Label(self.left_frame, text='ИН по ДДС:', font=14, pady=1)
        self.dds_label.grid(row=5, column=0,  sticky=W)
        self.dds_entry = Entry(self.left_frame, width=40, textvariable=self.dds_text)
        self.dds_entry.grid(row=5, column=1, sticky=W)
        self.mol2_label = Label(self.left_frame, text='МОЛ:', font=14, pady=1)
        self.mol2_label.grid(row=6, column=0, sticky=W)
        self.mol2_entry = Entry(self.left_frame, width=40)
        self.mol2_entry.grid(row=6, column=1, sticky=W)
        self.entity_text = StringVar()

       # Middle Frame
        self.button_invoice_frame = Frame(self.right_frame)
        self.button_invoice_frame.grid(row=0, column=1)
        self.middle_frame = LabelFrame(self.button_invoice_frame)
        self.middle_frame.grid(row=1, column=0, padx=15, pady=15, ipady=5, ipadx=5)
        self.add_btn_var = StringVar()
        self.add_btn_var.set('ФАКТУРА')
        self.add_btn = Entry(self.button_invoice_frame, textvariable=self.add_btn_var, font=3, width=20)
        self.add_btn.grid(row=0, column=0)
        self.check_button_debit = Checkbutton(self.middle_frame, text='Дебитно известие')
        self.check_button_debit.grid(row=1, column=0, sticky=NSEW)
        self.check_button_credit = Checkbutton(self.middle_frame, text='Кредитно известие')
        self.check_button_credit.grid(row=1, column=1, sticky=NSEW)
        self.invoice_number_label = Label(self.middle_frame, text='Номер:')
        self.invoice_number_label.grid(row=2, column=0, sticky=W)
        self.invoice_number = Entry(self.middle_frame)
        self.invoice_number.grid(row=3, column=0, pady=2, padx=2, sticky=NSEW)
        self.date_label = Label(self.middle_frame, text='Дата:')
        self.date_label.grid(row=2, column=1, sticky=W)
        self.date_entry = Entry(self.middle_frame)
        self.date_entry.grid(row=3, column=1, pady=2, padx=2, sticky=NSEW)

      # Treeview Frame
        self.treeview_frame = Frame(self.invoice_form)
        named_columns = ('#', 'Наименование на стоката/услугата', 'мер.ед.', 'количество', 'ед.цена', 'сума')
        self.new_chart = Treeview(self.treeview_frame, columns=named_columns, show='headings', height=8)
        for get_name in named_columns:
            self.new_chart.heading(get_name, text=get_name)
        self.new_chart.column('#', minwidth=0, width=19)
        self.new_chart.column('Наименование на стоката/услугата', minwidth=0, width=575)
        self.new_chart.column('мер.ед.', minwidth=0, width=76)
        self.new_chart.column('количество', minwidth=0, width=94)
        self.new_chart.column('ед.цена', minwidth=0, width=118)
        self.new_chart.column('сума', minwidth=0, width=168)
        self.treeview_frame.grid(row=4, column=0)
        self.y_scrollbar = Scrollbar(self.treeview_frame)
        self.new_chart.configure(yscrollcommand=self.y_scrollbar.set)
        self.y_scrollbar.grid(row=0, column=1, ipady=64)
        self.y_scrollbar.configure(command=self.new_chart.yview)
        self.new_frame = Frame(self.invoice_form)
        self.text_entry = Entry(self.new_frame, width=95)
        self.text_entry.grid(row=0, column=0, sticky=W)
        self.text_entry.bind('<Double-1>', self.call_open_Store)
        self.measure_entry = Entry(self.new_frame, width=12)
        self.measure_entry.grid(row=0, column=1, sticky=W)
        self.quantity_var = DoubleVar()
        self.quantity_entry = Entry(self.new_frame, textvariable=self.quantity_var, width=15)
        self.quantity_entry.grid(row=0, column=2, sticky=W)
        self.price_var = DoubleVar()
        self.price_entry = Entry(self.new_frame, textvariable=self.price_var, width=16)
        self.price_entry.grid(row=0, column=3, sticky=W)
        self.button_but = Button(self.new_frame, text='=', command=self.insert_data_into_entry)
        self.button_but.grid(row=0, column=4, sticky=W)
        self.sum_entry = Entry(self.new_frame, width=19)
        self.sum_entry.grid(row=0, column=5, sticky=W)
        self.new_frame.grid(row=3, column=0, sticky=E)
        self.entries_frame = Frame(self.invoice_form)
        self.sum_up_lst = []
        self.dan_osn_label = Label(self.entries_frame, text='Дан.основа:')
        self.dan_osn_label.grid(row=0, column=2, sticky=E)
        self.d_osn_entry = Entry(self.entries_frame, justify='right')
        self.d_osn_entry.grid(row=0, column=5, sticky=E)
        self.dd_s_label = Label(self.entries_frame, text='ДДС:')
        self.dd_s_label.grid(row=1, column=2, sticky=E)
        self.percentage_label = Label(self.entries_frame, text='%', width=2)
        self.percentage_label.grid(row=1, column=4, sticky=E)
        self.percentage_var = IntVar(value=20)
        self.percentage_entry = Entry(self.entries_frame, textvariable=self.percentage_var, width=3, justify='center')
        self.percentage_entry.grid(row=1, column=3, sticky=E)
        self.percentage_sum_entry = Entry(self.entries_frame, justify='right')
        self.percentage_sum_entry.grid(row=1, column=5, sticky=E)
        self.total_sum_entry = Entry(self.entries_frame, justify='right')
        self.total_sum_entry.grid(row=2, column=5, sticky=E)
        self.total_sum_label = Label(self.entries_frame, text='Сума:')
        self.total_sum_label.grid(row=2, column=2, sticky=E)
        self.entries_frame.grid(row=5, column=0,  sticky=E)

    # Lower Frame
        self.lower_frame = Frame(self.invoice_form)
        self.debit_label = Label(self.lower_frame, text='Дт', font=3)
        self.debit_label.grid(row=0, column=0)
        self.credit_label = Label(self.lower_frame, text='Кт', font=3)
        self.credit_label.grid(row=0, column=1)
        self.sum2_label = Label(self.lower_frame, text='Сума', font=3)
        self.sum2_label.grid(row=0, column=2)
        self.description_label = Label(self.lower_frame, text='Описание', font=3)
        self.description_label.grid(row=0, column=3)
        self.lower_frame.grid(row=6, column=0, sticky=W, padx=2)
        self.debit_entry = Entry(self.lower_frame, width=10)
        self.debit_entry.grid(row=1, column=0, padx=2)
        self.debit_entry.bind('<Double-1>', self.call_General_Ledger)
        self.credit_entry = Entry(self.lower_frame, width=10)
        self.credit_entry.grid(row=1, column=1)
        self.credit_entry.bind('<Double-1>', self.call_General_Ledger)
        self.sum2_entry = Entry(self.lower_frame, width=10)
        self.sum2_entry.grid(row=1, column=2)
        self.description_entry = Entry(self.lower_frame, width=80)
        self.description_entry.grid(row=1, column=3, padx=2)
        self.debit_list = []
        self.credit_list = []
        self.add_entry_btn = Button(self.lower_frame, text='Добави', width=10, command=self.insert_data_into_accounts_chart)
        self.add_entry_btn.grid(row=1, column=4)
        accounting_chart_columns = ('Дт', 'Кт', 'Сума', 'Описание на счетоводната операция')
        self.accounts_chart = Treeview(self.invoice_form, columns=accounting_chart_columns, show='headings', height=2)
        self.accounts_chart.grid(row=7, sticky=W, padx=4)
        for it_s in accounting_chart_columns:
            self.accounts_chart.heading(it_s, text=it_s)
        self.accounts_chart.column('Дт', minwidth=0, width=65)
        self.accounts_chart.column('Кт', minwidth=0, width=65)
        self.accounts_chart.column('Сума', minwidth=0, width=65)
        self.accounts_chart.column('Описание на счетоводната операция', minwidth=0, width=484)
        self.button_but = Button(self.new_frame, text='Добави', width=9, command=self.insert_into_chart)
        self.button_but.grid(row=0, column=6)
        self.new_chart.grid(row=0, column=0)
        self.iter_list = []

# Фактура за продажба
    def call_invoice_form_2(self):
        self.invoice_form_2 = Toplevel()
        self.invoice_form_2.geometry('1090x650')
        self.invoice_form_2.title('Въвеждане на нова фактура за продажба')
        self.button_save_close_frame = Frame(self.invoice_form_2)
        self.button_save_close_frame.grid(row=0, column=0, sticky=E)
        self.button_save = Button(self.button_save_close_frame, text='Запис', font=6, width=12, height=1, command=self.save_button_2)
        self.button_save.grid(row=0, column=0, padx=5, pady=3)
        self.button_quit = Button(self.button_save_close_frame, text='Изход', font=6, width=12, height=1, command=self.quit_invoice_form_2_window)
        self.button_quit.grid(row=0, column=1)

       # Right Frame
        self.right_frame = Frame(self.invoice_form_2, padx=5, pady=5)
        self.right_frame.grid(row=1, column=0, columnspan=1)
        self.buyer_frame = LabelFrame(self.right_frame)
        self.buyer_frame.grid(row=0, column=2)
        self.buyer_label = Label(self.buyer_frame, text='Продавач:', font=('bold', 16), pady=1)
        self.buyer_label.grid(row=0, column=0, sticky=W)
        self.buyer_name_label = Label(self.buyer_frame, text='    МОЯТА ФИРМА ЕООД ', font=14, pady=1)
        self.buyer_name_label.grid(row=1, column=0, sticky=W, ipady=3)
        self.buyer_city_label = Label(self.buyer_frame, text=' Град:  СОФИЯ ', font=14, pady=1)
        self.buyer_city_label.grid(row=2, column=0, sticky=W)
        self.buyer_address_label = Label(self.buyer_frame, text=' Адрес:  бул. Витоша 22', font=14, pady=1)
        self.buyer_address_label.grid(row=3, column=0, sticky=W)
        self.buyer_bulstat_label = Label(self.buyer_frame, text=' ИН по БУЛСТАТ:  115115115', font=14, pady=1)
        self.buyer_bulstat_label.grid(row=4, column=0, sticky=W)
        self.buyer_dds_label = Label(self.buyer_frame, text=' ИН по ДДС:  BG 115115115', font=14, pady=1)
        self.buyer_dds_label.grid(row=5, column=0, sticky=W)
        self.mol_label = Label(self.buyer_frame, text=' МОЛ:  ТЕОДОРА ДРАГНЕВА                                      ', font=14, pady=1)
        self.mol_label.grid(row=6, column=0, sticky=W)

     # Left Frame
        self.left_frame = LabelFrame(self.right_frame)
        self.left_frame.grid(row=0, column=0, columnspan=1)
        self.seller_text = StringVar()
        self.seller_label = Label(self.left_frame, text='Купувач:', font=('bold', 16), pady=1)
        self.seller_label.grid(row=0, column=0, sticky=W)
        self.seller_entry = Entry(self.left_frame, width=40, textvariable=self.seller_text)
        self.seller_entry.grid(row=1, column=1, sticky=W)
        self.contragenty_button = Button(self.left_frame, text='Контрагенти', font=14, pady=1, command=self.call_contragent)
        self.contragenty_button.grid(row=1, column=0, sticky=W)
        self.details_city_label = Label(self.left_frame, text='Град:', font=14, pady=1)
        self.details_city_label.grid(row=2, column=0, sticky=W)
        self.details_city_entry = Entry(self.left_frame, width=40)
        self.details_city_entry.grid(row=2, column=1, sticky=W)
        self.details_address_label = Label(self.left_frame, text='Адрес:', font=14, pady=1)
        self.details_address_label.grid(row=3, column=0, sticky=W)
        self.details_address_entry = Entry(self.left_frame, width=40)
        self.details_address_entry.grid(row=3, column=1, sticky=W)
        self.bulstat_text = StringVar()
        self.bulstat_label = Label(self.left_frame, text='ИН по БУЛСТАТ:', font=14, pady=1)
        self.bulstat_label.grid(row=4, column=0,  sticky=W)
        self.bulstat_entry = Entry(self.left_frame, width=40, textvariable=self.bulstat_text)
        self.bulstat_entry.grid(row=4, column=1, sticky=W)
        self.dds_text = StringVar()
        self.dds_label = Label(self.left_frame, text='ИН по ДДС:', font=14, pady=1)
        self.dds_label.grid(row=5, column=0,  sticky=W)
        self.dds_entry = Entry(self.left_frame, width=40, textvariable=self.dds_text)
        self.dds_entry.grid(row=5, column=1, sticky=W)
        self.mol2_label = Label(self.left_frame, text='МОЛ:', font=14, pady=1)
        self.mol2_label.grid(row=6, column=0, sticky=W)
        self.mol2_entry = Entry(self.left_frame, width=40)
        self.mol2_entry.grid(row=6, column=1, sticky=W)
        self.entity_text = StringVar()

     # Middle Frame
        self.button_invoice_frame = Frame(self.right_frame)
        self.button_invoice_frame.grid(row=0, column=1)
        self.middle_frame = LabelFrame(self.button_invoice_frame)
        self.middle_frame.grid(row=1, column=0, padx=15, pady=15, ipady=5, ipadx=5)
        self.add_btn_var = StringVar()
        self.add_btn_var.set('ФАКТУРА')
        self.add_btn = Entry(self.button_invoice_frame, textvariable=self.add_btn_var, font=3, width=20)
        self.add_btn.grid(row=0, column=0)
        self.check_button_debit = Checkbutton(self.middle_frame, text='Дебитно известие')
        self.check_button_debit.grid(row=1, column=0, sticky=NSEW)
        self.check_button_credit = Checkbutton(self.middle_frame, text='Кредитно известие')
        self.check_button_credit.grid(row=1, column=1, sticky=NSEW)
        self.invoice_number_label = Label(self.middle_frame, text='Номер:')
        self.invoice_number_label.grid(row=2, column=0, sticky=W)
        self.invoice_number = Entry(self.middle_frame)
        self.invoice_number.grid(row=3, column=0, pady=2, padx=2, sticky=NSEW)
        self.date_label = Label(self.middle_frame, text='Дата:')
        self.date_label.grid(row=2, column=1, sticky=W)
        self.date_entry = Entry(self.middle_frame)
        self.date_entry.grid(row=3, column=1, pady=2, padx=2, sticky=NSEW)

      # Treeview Frame
        self.treeview_frame = Frame(self.invoice_form_2)
        named_columns = ('#', 'Наименование на стоката/услугата', 'мер.ед.', 'количество', 'ед.цена', 'сума')
        self.new_chart = Treeview(self.treeview_frame, columns=named_columns, show='headings', height=8)
        for get_name in named_columns:
            self.new_chart.heading(get_name, text=get_name)
        self.new_chart.column('#', minwidth=0, width=19)
        self.new_chart.column('Наименование на стоката/услугата', minwidth=0, width=575)
        self.new_chart.column('мер.ед.', minwidth=0, width=76)
        self.new_chart.column('количество', minwidth=0, width=94)
        self.new_chart.column('ед.цена', minwidth=0, width=118)
        self.new_chart.column('сума', minwidth=0, width=168)
        self.treeview_frame.grid(row=6, column=0)
        self.y_scrollbar = Scrollbar(self.treeview_frame)
        self.new_chart.configure(yscrollcommand=self.y_scrollbar.set)
        self.y_scrollbar.grid(row=0, column=1, ipady=64)
        self.y_scrollbar.configure(command=self.new_chart.yview)
        self.new_frame = Frame(self.invoice_form_2)
        self.text_entry = Entry(self.new_frame, width=95)
        self.text_entry.grid(row=0, column=0, sticky=W)
        self.text_entry.bind('<Double-1>', self.call_open_Store)
        self.measure_entry = Entry(self.new_frame, width=12)
        self.measure_entry.grid(row=0, column=1, sticky=W)
        self.quantity_var = DoubleVar()
        self.quantity_entry = Entry(self.new_frame, textvariable=self.quantity_var, width=15)
        self.quantity_entry.grid(row=0, column=2, sticky=W)
        self.price_var = DoubleVar()
        self.price_entry = Entry(self.new_frame, textvariable=self.price_var, width=16)
        self.price_entry.grid(row=0, column=3, sticky=W)
        self.button_but = Button(self.new_frame, text='=', command=self.insert_data_into_entry)
        self.button_but.grid(row=0, column=4, sticky=W)
        self.sum_entry = Entry(self.new_frame, width=19)
        self.sum_entry.grid(row=0, column=5, sticky=W)
        self.new_frame.grid(row=5, column=0, sticky=E)
        self.entries_frame = Frame(self.invoice_form_2)
        self.sum_up_lst = []
        self.dan_osn_label = Label(self.entries_frame, text='Дан.основа:')
        self.dan_osn_label.grid(row=0, column=2, sticky=E)
        self.d_osn_entry = Entry(self.entries_frame, justify='right')
        self.d_osn_entry.grid(row=0, column=5, sticky=E)
        self.dd_s_label = Label(self.entries_frame, text='ДДС:')
        self.dd_s_label.grid(row=1, column=2, sticky=E)
        self.percentage_label = Label(self.entries_frame, text='%', width=2)
        self.percentage_label.grid(row=1, column=4, sticky=E)
        self.percentage_var = IntVar(value=20)
        self.percentage_entry = Entry(self.entries_frame, textvariable=self.percentage_var, width=3, justify='center')
        self.percentage_entry.grid(row=1, column=3, sticky=E)
        self.percentage_sum_entry = Entry(self.entries_frame, justify='right')
        self.percentage_sum_entry.grid(row=1, column=5, sticky=E)
        self.total_sum_entry = Entry(self.entries_frame, justify='right')
        self.total_sum_entry.grid(row=2, column=5, sticky=E)
        self.total_sum_label = Label(self.entries_frame, text='Сума:')
        self.total_sum_label.grid(row=2, column=2, sticky=E)
        self.entries_frame.grid(row=7, column=0,  sticky=E)

    # Lower Frame
        self.lower_frame = Frame(self.invoice_form_2)
        self.debit_label = Label(self.lower_frame, text='Дт', font=3)
        self.debit_label.grid(row=0, column=0)
        self.credit_label = Label(self.lower_frame, text='Кт', font=3)
        self.credit_label.grid(row=0, column=1)
        self.sum2_label = Label(self.lower_frame, text='Сума', font=3)
        self.sum2_label.grid(row=0, column=2)
        self.description_label = Label(self.lower_frame, text='Описание', font=3)
        self.description_label.grid(row=0, column=3)
        self.lower_frame.grid(row=8, column=0, sticky=W, padx=2)
        self.debit_entry = Entry(self.lower_frame, width=10)
        self.debit_entry.grid(row=1, column=0, padx=2)
        self.debit_entry.bind('<Double-1>', self.call_General_Ledger)
        self.credit_entry = Entry(self.lower_frame, width=10)
        self.credit_entry.grid(row=1, column=1)
        self.credit_entry.bind('<Double-1>', self.call_General_Ledger)
        self.sum2_entry = Entry(self.lower_frame, width=10)
        self.sum2_entry.grid(row=1, column=2)
        self.description_entry = Entry(self.lower_frame, width=80)
        self.description_entry.grid(row=1, column=3, padx=2)
        self.debit_list = []
        self.credit_list = []
        self.add_entry_btn = Button(self.lower_frame, text='Добави', width=10, command=self.insert_data_into_accounts_chart)
        self.add_entry_btn.grid(row=1, column=4)
        accounting_chart_columns = ('Дт', 'Кт', 'Сума', 'Описание на счетоводната операция')
        self.accounts_chart = Treeview(self.invoice_form_2, columns=accounting_chart_columns, show='headings', height=2)
        self.accounts_chart.grid(row=9, sticky=W, padx=4)
        for it_s in accounting_chart_columns:
            self.accounts_chart.heading(it_s, text=it_s)
        self.accounts_chart.column('Дт', minwidth=0, width=65)
        self.accounts_chart.column('Кт', minwidth=0, width=65)
        self.accounts_chart.column('Сума', minwidth=0, width=65)
        self.accounts_chart.column('Описание на счетоводната операция', minwidth=0, width=484)
        self.button_but = Button(self.new_frame, text='Добави', width=9, command=self.insert_into_chart)
        self.button_but.grid(row=0, column=6)
        self.new_chart.grid(row=0, column=0)
        self.iter_list = []

    def insert_data_into_entry(self):
        try:
            sum_sum = float(self.quantity_var.get()) * float(self.price_var.get())
            sum_sum_formated = format(sum_sum, '.5f')
            self.sum_entry.insert(0,sum_sum_formated)
            if self.quantity_var.get() == '' or self.price_var.get() == '':
                messagebox.showerror('Грешка!', 'Въведете число')
        except _tkinter.TclError:
            messagebox.showerror('Грешка!', 'Въведете число')

    def insert_into_chart(self):
        try:
            iter_dictionary = {'number': len(self.iter_list) + 1, 'text': self.text_entry.get(), 'measure': self.measure_entry.get(), 'quantity': self.quantity_entry.get(), 'price': self.price_entry.get(), 'sum':  self.sum_entry.get()}
            print(iter_dictionary)
            self.iter_list.append(iter_dictionary['text'])
            print(self.iter_list)
            rows = self.new_chart.insert("", "end", values=(iter_dictionary['number'], iter_dictionary['text'], iter_dictionary['measure'], iter_dictionary['quantity'], iter_dictionary['price'], iter_dictionary['sum']))
            self.add_sums()
        except ValueError:
            messagebox.showerror('Грешка!', 'Въведете число')

    def add_sums(self):
        add_sum_to_list = float(self.sum_entry.get())
        self.sum_up_lst.append(add_sum_to_list)
        def_var = sum(self.sum_up_lst)
        print(self.sum_up_lst)
        self.text_entry.delete(0, END)
        self.measure_entry.delete(0, END)
        self.quantity_entry.delete(0, END)
        self.price_entry.delete(0, END)
        self.sum_entry.delete(0, END)
        self.d_osn_entry.delete(0, END)
        self.d_osn_entry.insert(END, format(def_var, '.2f'))
        dds_osn_sum = (float(sum(self.sum_up_lst) * float(self.percentage_entry.get()) / 100))
        dds_osn_sum_formated = format(dds_osn_sum, '.2f')
        self.percentage_sum_entry.delete(0, END)
        self.percentage_sum_entry.insert(END, dds_osn_sum_formated)
        fin_sum = float(sum(self.sum_up_lst)) + float(self.percentage_sum_entry.get())
        fin_sum_formated = format(fin_sum, '.2f')
        self.total_sum_entry.delete(0, END)
        self.total_sum_entry.insert(END, fin_sum_formated)

    def insert_data_into_accounts_chart(self):
        rows_acc_chart = self.accounts_chart.insert("", "end", values=(self.debit_entry.get(), self.credit_entry.get(), self.sum2_entry.get(), self.description_entry.get()))
        self.dbt_var = int(self.debit_entry.get())
        self.crdt_var = int(self.credit_entry.get())
        self.select_sum = float(self.sum2_entry.get())
        self.debit_list.append((self.dbt_var, self.select_sum))
        self.credit_list.append((self.crdt_var, self.select_sum))
        print(self.debit_list)
        print(self.credit_list)
        self.debit_entry.delete(0, END)
        self.credit_entry.delete(0, END)
        self.sum2_entry.delete(0, END)
        self.description_entry.delete(0, END)

    def save_button(self):
        conn_db.execute("INSERT INTO inserteddocs VALUES (NULL, ?, ?, ?, ?, ?, ?)", (self.add_btn.get(), self.invoice_number.get(), self.date_entry.get(), self.d_osn_entry.get(), self.percentage_sum_entry.get(), self.total_sum_entry.get()))
        conn_db.commit()
        result_docs = conn_db.execute('SELECT * FROM inserteddocs ORDER BY id DESC LIMIT 1').fetchone()
        self.docs_chart.insert("", END, values=result_docs)
        self.insert_accounts_sums()
        self.quit_invoice_form_window()

    def save_button_2(self):
        conn_db.execute("INSERT INTO inserteddocs VALUES (NULL, ?, ?, ?, ?, ?, ?)", (self.add_btn.get(), self.invoice_number.get(), self.date_entry.get(), self.d_osn_entry.get(), self.percentage_sum_entry.get(), self.total_sum_entry.get()))
        conn_db.commit()
        result_docs = conn_db.execute('SELECT * FROM inserteddocs ORDER BY id DESC LIMIT 1').fetchone()
        self.docs_chart.insert("", END, values=result_docs)
        self.insert_accounts_sums()
        self.quit_invoice_form_2_window()

    def insert_accounts_sums(self):   # vzima informaciq za debit i kredit ot spisycite   'debit_list'  i  'credit_list'
        try:
            for row_1 in self.debit_list:
                deb_var = row_1[0]
                deb_sum = row_1[1]
                slctd_debit = conn_db.execute('SELECT debit2 FROM accounts WHERE accountnumber=?', (deb_var, )).fetchone()
                new_slct_d = str(slctd_debit)
                strip1d = new_slct_d.replace(',', '')
                strip2d = strip1d.replace('(', '')
                strip3d = strip2d.replace(')', '')
                new_debit = float(strip3d)
                result1 = float(deb_sum)
                totalVarD = new_debit + result1
        # print(totalVarD)
                if deb_var:
                    conn_db.execute('UPDATE accounts SET debit2=? WHERE accountnumber=?', (totalVarD, deb_var))
                    conn_db.commit()
                start_debit = conn_db.execute('SELECT debit1 FROM accounts WHERE accountnumber=?', (deb_var, )).fetchone()
                new_start_d = str(start_debit)
                strip1nd = new_start_d.replace(',', '')
                strip2nd = strip1nd.replace('(', '')
                strip3nd = strip2nd.replace(')', '')
                new_start_stripped = float(strip3nd)
                endTotalVarD = totalVarD + new_start_stripped
                # print(endTotalVarD)
                conn_db.execute('UPDATE accounts SET accumulateddebit=? WHERE accountnumber=?', (endTotalVarD, deb_var))
                conn_db.commit()

            for item in self.credit_list:
                crdt_var = item[0]
                crdt_sum = item[1]
                slctd_credit = conn_db.execute('SELECT credit2 FROM accounts WHERE accountnumber=?', (crdt_var, )).fetchone()
                new_slct_c = str(slctd_credit)
                strip1c = new_slct_c.replace(',', '')
                strip2c = strip1c.replace('(', '')
                strip3c = strip2c.replace(')', '')
                new_credit = float(strip3c)
                result2 = float(crdt_sum)
                totalVarC = new_credit + result2
        # print(totalVarC)
                if crdt_var:
                    conn_db.execute('UPDATE accounts SET credit2=? WHERE accountnumber=?', (totalVarC, crdt_var))
                    conn_db.commit()
                start_credit = conn_db.execute('SELECT credit1 FROM accounts WHERE accountnumber=?', (crdt_var, )).fetchone()
                new_start_c = str(start_credit)
                strip1nc = new_start_c.replace(',', '')
                strip2nc = strip1nc.replace('(', '')
                strip3nc = strip2nc.replace(')', '')
                new_start_cr_stripped = float(strip3nc)
                endTotalVarC = totalVarC + new_start_cr_stripped
                # print(endTotalVarC)
                conn_db.execute('UPDATE accounts SET accumulatedcredit=? WHERE accountnumber=?', (endTotalVarC, crdt_var))
                conn_db.commit()
            self.end_balance()
            for cd_row in self.g_ledger_chart.get_children():
                self.g_ledger_chart.delete(cd_row)
            self.fetch_info_accounts()
        except:
            pass

    def end_balance(self):
        accumulated_credit = conn_db.execute('SELECT accountnumber, accumulateddebit, accumulatedcredit FROM accounts').fetchall()
        for acc_item, itm_n, position in accumulated_credit:
            strip1 = str(acc_item).replace('(', '')
            strip2 = strip1.replace(',', '')
            strip3 = strip2.replace(')', '')
            int_account = int(strip3)
            str1 = str(itm_n).replace('(', '')
            str2 = str1.replace(',', '')
            str3 = str2.replace(')', '')
            debit_float = float(str3)
            crt1 = str(position).replace('(', '')
            crt2 = crt1.replace(',', '')
            crt3 = crt2.replace(')', '')
            credit_float = float(crt3)
            summary_dict = {'account': int_account, 'debitsums': debit_float, 'creditsums': credit_float}
            # print(summary_dict)

            ending_balance = summary_dict['debitsums'] - summary_dict['creditsums']
            # print(ending_balance)
            if ending_balance >= 0:
                conn_db.execute('UPDATE accounts SET debit3=? WHERE accountnumber=?', (ending_balance, summary_dict['account']))
                conn_db.commit()
                conn_db.execute('UPDATE accounts SET credit3=? WHERE accountnumber=?', (0.0, summary_dict['account']))
                conn_db.commit()
            if ending_balance <= 0:
                conn_db.execute('UPDATE accounts SET credit3=? WHERE accountnumber=?', (abs(ending_balance), summary_dict['account']))
                conn_db.commit()
                conn_db.execute('UPDATE accounts SET debit3=? WHERE accountnumber=?', (0.0, summary_dict['account']))
                conn_db.commit()

    def call_open_Store(self, event):
        self.open_store()

    def call_General_Ledger(self, event):
        self.open_general_ledger()

    def quit_invoice_form_window(self):
        self.invoice_form.destroy()

    def quit_invoice_form_2_window(self):
        self.invoice_form_2.destroy()

# Номенклатура на контрагентите
    def call_contragent(self):
        self.win_con = Toplevel()
        self.win_con.geometry('900x500')
        self.win_con.title('Номенклатура на контрагентите')
        self.label = LabelFrame(self.win_con, padx=5, pady=5)
        self.label.grid(row=3, column=0, sticky=W)
        self.frame_treeview = Frame(self.win_con)
        self.frame_treeview.grid(row=1, column=0,)
        self.columns = ('#', 'Име', 'идентифик.номер (БУЛСТАТ)', 'идентифик.номер по ДДС:', 'номер от НДР:', 'ILN:', 'телефон:', 'населено място:', 'адрес по регистрация:', 'актуален адрес (улица):', 'МОЛ:', 'МОЛ (за получател):', 'държава:', 'регион(област):')
        self.chart = Treeview(self.frame_treeview, columns=self.columns, show='headings', height=20)
        self.chart.bind(self.fetch_data())
        for name in self.columns:
            self.chart.heading(name, text=name)
        self.chart.column('#', minwidth=0, width=20)
        self.chart.column('Име', minwidth=0, width=150)
        self.chart.column('идентифик.номер (БУЛСТАТ)', minwidth=0, width=100)
        self.chart.column('идентифик.номер по ДДС:', minwidth=0, width=100)
        self.chart.column('номер от НДР:', minwidth=0, width=80)
        self.chart.column('ILN:', minwidth=0, width=70)
        self.chart.column('телефон:', minwidth=0, width=100)
        self.chart.column('населено място:', minwidth=0, width=100)
        self.chart.column('адрес по регистрация:', minwidth=0, width=100)
        self.chart.column('актуален адрес (улица):', minwidth=0, width=100)
        self.chart.column('МОЛ:', minwidth=0, width=100)
        self.chart.column('МОЛ (за получател):', minwidth=0, width=100)
        self.chart.column('държава:', minwidth=0, width=80)
        self.chart.column('регион(област):', minwidth=0, width=100)
        self.y_scrollbar = Scrollbar(self.frame_treeview)
        self.chart.configure(yscrollcommand=self.y_scrollbar.set)
        self.x_scrollbar = Scrollbar(self.frame_treeview, orient=HORIZONTAL)
        self.chart.configure(xscrollcommand=self.x_scrollbar.set)
        self.y_scrollbar.grid(row=0, column=1, ipady=188)
        self.x_scrollbar.grid(row=1, column=0, sticky=W, ipadx=300)
        self.y_scrollbar.configure(command=self.chart.yview)
        self.x_scrollbar.configure(command=self.chart.xview)
        self.chart.grid(row=0, column=0)
        self.buttonNew = Button(self.label, text='Нов', font=6, width=12, height=1, command=self.open_FillInForm).grid(row=4, column=0,  padx=5, pady=3)
        self.buttonEdit = Button(self.label, text='Корекция', font=6, width=12, height=1, command=self.update_contr).grid(row=4, column=1)
        self.buttonChoose = Button(self.label, text='Избор', font=6, width=12, height=1, command=self.fill_contr_list)
        self.buttonChoose.grid(row=4, column=2,  padx=5, pady=3)
        self.buttonDelete = Button(self.label, text='Изтриване', font=6, width=12, height=1, command=self.delete_record_contr).grid(row=4, column=3)
        self.buttonQuit = Button(self.label, text='Отказ', font=6, width=12, height=1, command=self.quit_button).grid(row=4, column=4,  padx=5, pady=3)
        # self.buttonHelp = Button(self.label, text='Help', font=6, width=12, height=1).grid(row=4, column=5)
        self.win_con.grid()

    def select_item_contr(self):
        self.index = self.chart.focus()
        self.selected_item = self.chart.item(self.index)
        self.my_choice = self.selected_item.get('values')

    def fill_contr_list(self):
        try:
            self.select_item_contr()
            self.seller_entry.delete(0, END)
            self.seller_entry.insert(END, self.my_choice[1])
            self.bulstat_entry.delete(0, END)
            self.bulstat_entry.insert(END, self.my_choice[2])
            self.dds_entry.delete(0, END)
            self.dds_entry.insert(END, self.my_choice[3])
            self.details_city_entry.delete(0, END)
            self.details_city_entry.insert(END, self.my_choice[7])
            self.details_address_entry.delete(0, END)
            self.details_address_entry.insert(END, self.my_choice[8])
            self.mol2_entry.delete(0, END)
            self.mol2_entry.insert(END, self.my_choice[10])
            self.win_con.destroy()
        except AttributeError:
            messagebox.showerror('Грешка', 'Моля, влезте първо в секция "Документи" и изберете опция от меню "Нов документ"')

    def delete_record_contr(self):
        try:
            self.select_item_contr()
            conn_db.execute("DELETE FROM contragents WHERE id=?", (self.my_choice[0],))
            conn_db.commit()
            for contragent in self.chart.get_children():
                self.chart.delete(contragent)
            self.fetch_data()
        except IndexError:
            messagebox.showerror('Грешка', 'Първо трябва да изберете контрагент за изтриване')

    def update_contr(self):
        self.select_item_contr()
        self.open_FillInForm()
        self.name_entry.delete(0, END)
        self.name_entry.insert(END, self.my_choice[1])
        self.bulstat2_entry.delete(0, END)
        self.bulstat2_entry.insert(END, self.my_choice[2])
        self.dds_entry_entry.delete(0, END)
        self.dds_entry_entry.insert(END, self.my_choice[3])
        self.ndr_entry.delete(0, END)
        self.ndr_entry.insert(END, self.my_choice[4])
        self.iln_entry.delete(0, END)
        self.iln_entry.insert(END, self.my_choice[5])
        self.phone_entry.delete(0, END)
        self.phone_entry.insert(END, self.my_choice[6])
        self.city_entry.delete(0, END)
        self.city_entry.insert(END, self.my_choice[7])
        self.address_entry.delete(0, END)
        self.address_entry.insert(END, self.my_choice[8])
        self.current_address_entry.delete(0, END)
        self.current_address_entry.insert(END, self.my_choice[9])
        self.material_otgovornik_entry.delete(0, END)
        self.material_otgovornik_entry.insert(END, self.my_choice[10])
        self.mol_poluchil_entry.delete(0, END)
        self.mol_poluchil_entry.insert(END, self.my_choice[11])
        self.country_entry.delete(0, END)
        self.country_entry.insert(END, self.my_choice[12])
        self.region_entry.delete(0, END)
        self.region_entry.insert(END, self.my_choice[13])

    def fetch_data(self):
        result = conn_db.execute('SELECT * FROM contragents').fetchall()
        for row in result:
            self.chart.insert("", END, values=row)

    def quit_button(self):
        self.win_con.destroy()

# Въвеждане на нов контрагент
    def open_FillInForm(self):
        self.fillin_form = Toplevel()
        self.fillin_form.geometry('700x500')
        self.fillin_form.title('Въвеждане на нов контрагент')
        self.osn_danni = Label(self.fillin_form, text='Основни данни', font=8, pady=10)
        self.osn_danni.grid(row=0, column=0, sticky=W)
        self.name_field = Label(self.fillin_form, text='Име:', font=8, pady=1)
        self.name_field.grid(row=1, column=0, sticky=W)
        self.name_entry = Entry(self.fillin_form, width=40)
        self.name_entry.grid(row=2, column=0, sticky=W)
        self.bulstat_field = Label(self.fillin_form, text='идентифик.номер (БУЛСТАТ):', font=8, pady=1)
        self.bulstat_field.grid(row=3, column=0, sticky=W)
        self.dds_field = Label(self.fillin_form, text='идентифик.номер по ДДС:', font=8, pady=1)
        self.dds_field.grid(row=3, column=1, sticky=W)
        self.bulstat2_entry = Entry(self.fillin_form, width=40)
        self.bulstat2_entry.grid(row=4, column=0, sticky=W)
        self.dds_entry_entry = Entry(self.fillin_form, width=40)
        self.dds_entry_entry.grid(row=4, column=1, sticky=W)
        self.ndr_field = Label(self.fillin_form, text='номер от НДР:', font=8, pady=1)
        self.ndr_field.grid(row=5, column=0, sticky=W)
        self.iln_field = Label(self.fillin_form, text='ILN:', font=8, pady=1)
        self.iln_field.grid(row=5, column=1, sticky=W)
        self.phone_field = Label(self.fillin_form, text='телефон:', font=8, pady=1)
        self.phone_field.grid(row=9, column=1, sticky=W)
        self.ndr_entry = Entry(self.fillin_form, width=40)
        self.ndr_entry.grid(row=6, column=0, sticky=W)
        self.iln_entry = Entry(self.fillin_form, width=40)
        self.iln_entry.grid(row=6, column=1, sticky=W)
        self.phone_entry = Entry(self.fillin_form, width=40)
        self.phone_entry.grid(row=10, column=1, sticky=W)
        self.city_field = Label(self.fillin_form, text='населено място:', font=8, pady=1)
        self.city_field.grid(row=7, column=0, sticky=W)
        self.address_field = Label(self.fillin_form, text='адрес по регистрация:', font=8, pady=1)
        self.address_field.grid(row=7, column=1, sticky=W)
        self.city_entry = Entry(self.fillin_form, width=40)
        self.city_entry.grid(row=8, column=0, sticky=W)
        self.address_entry = Entry(self.fillin_form, width=40)
        self.address_entry.grid(row=8, column=1, sticky=W)
        self.current_address_field = Label(self.fillin_form, text='актуален адрес (улица):', font=8, pady=1)
        self.current_address_field.grid(row=9, column=0, sticky=W)
        self.current_address_entry = Entry(self.fillin_form, width=40)
        self.current_address_entry.grid(row=10, column=0, sticky=W)
        self.material_otgovornik_field = Label(self.fillin_form, text='МОЛ:', font=8, pady=1)
        self.material_otgovornik_field.grid(row=11, column=0, sticky=W)
        self.material_otgovornik_entry = Entry(self.fillin_form, width=40)
        self.material_otgovornik_entry.grid(row=12, column=0, sticky=W)
        self.mol_poluchil_field = Label(self.fillin_form, text='МОЛ (за получател):', font=8, pady=1)
        self.mol_poluchil_field.grid(row=13, column=0, sticky=W)
        self.mol_poluchil_entry = Entry(self.fillin_form, width=40)
        self.mol_poluchil_entry.grid(row=14, column=0, sticky=W)
        self.country_field = Label(self.fillin_form, text='държава:', font=8, pady=1)
        self.country_field.grid(row=15, column=0, sticky=W)
        self.country_entry = Entry(self.fillin_form, width=40)
        self.country_entry.grid(row=16, column=0, sticky=W)
        self.region_field = Label(self.fillin_form, text='регион(област):', font=8, pady=1)
        self.region_field.grid(row=17, column=0, sticky=W)
        self.region_entry = Entry(self.fillin_form, width=40)
        self.region_entry.grid(row=18, column=0, sticky=W)
        self.button_save = Button(self.fillin_form, text='Запис', font=6, width=12, height=1, command=self.insert_into_db)
        self.button_save.grid(row=20, column=0,  padx=5, pady=3)
        self.button_quit = Button(self.fillin_form, text='Отказ', font=6, width=12, height=1, command=self.quit_fill_in_form)
        self.button_quit.grid(row=20, column=1)
        self.update_button = Button(self.fillin_form, text='Корекция', command=self.update_db_contr, font=6, width=12, height=1)
        self.update_button.grid(row=20, column=2)

    def insert_into_db(self):
        conn_db.execute("INSERT INTO contragents VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (self.name_entry.get(), self.bulstat2_entry.get(), self.dds_entry_entry.get(), self.ndr_entry.get(), self.iln_entry.get(), self.phone_entry.get(), self.city_entry.get(), self.address_entry.get(), self.current_address_entry.get(), self.material_otgovornik_entry.get(), self.mol_poluchil_entry.get(), self.country_entry.get(), self.region_entry.get()))
        conn_db.commit()
        self.clear_text()
        result = conn_db.execute('SELECT * FROM contragents ORDER BY id DESC LIMIT 1').fetchone()
        self.chart.insert("", END, values=result)

    def clear_text(self):
        self.name_entry.delete(0, END)
        self.bulstat2_entry.delete(0, END)
        self.dds_entry_entry.delete(0, END)
        self.ndr_entry.delete(0, END)
        self.iln_entry.delete(0, END)
        self.phone_entry.delete(0, END)
        self.city_entry.delete(0, END)
        self.address_entry.delete(0, END)
        self.current_address_entry.delete(0, END)
        self.material_otgovornik_entry.delete(0, END)
        self.mol_poluchil_entry.delete(0, END)
        self.country_entry.delete(0, END)
        self.region_entry.delete(0, END)

    def update_db_contr(self):
        conn_db.execute('UPDATE contragents SET company=?, bulstat=?, vat_number=?, ndr_number=?, iln_number=?, phone_number=?, city=?, registration_address=?, current_address=?, personincharge=?, persontoreceive=?, country=?, region=? WHERE id=?', (self.name_entry.get(), self.bulstat2_entry.get(), self.dds_entry_entry.get(), self.ndr_entry.get(), self.iln_entry.get(), self.phone_entry.get(), self.city_entry.get(), self.address_entry.get(), self.current_address_entry.get(), self.material_otgovornik_entry.get(), self.mol_poluchil_entry.get(), self.country_entry.get(), self.region_entry.get(), self.my_choice[0]))
        conn_db.commit()
        self.quit_fill_in_form()
        for updt_contr in self.chart.get_children():
            self.chart.delete(updt_contr)
        self.fetch_data()

    def quit_fill_in_form(self):
        self.fillin_form.destroy()

# Склад
    def open_store(self):
        self.store_form = Toplevel()
        self.store_form.geometry('800x600')
        self.store_form.title('Склад')
        self.tree_store_frame = Frame(self.store_form)
        store_named_columns = ('#', 'Материал / Стока', 'Мер.ед.', 'Количество', 'Сума', 'Ср.цена')
        self.store_chart = Treeview(self.tree_store_frame, columns=store_named_columns, show='headings', height=20)
        for get_column_name in store_named_columns:
            self.store_chart.heading(get_column_name, text=get_column_name)
        self.store_chart.grid(row=0, column=0)
        self.tree_store_frame.grid(row=1, column=0)
        self.store_chart.column('#', minwidth=0, width=30)
        self.store_chart.column('Материал / Стока', minwidth=0, width=360)
        self.store_chart.column('Мер.ед.', minwidth=0, width=60)
        self.store_chart.column('Количество', minwidth=0, width=90)
        self.store_chart.column('Сума', minwidth=0, width=90)
        self.store_chart.column('Ср.цена', minwidth=0, width=90)

# Оборотна ведомост
    def open_general_ledger(self):
        self.general_ledger_form = Toplevel()
        self.general_ledger_form.geometry('1050x650')
        self.general_ledger_form.title('Оборотна ведомост')
        self.g_ledger_frame = Frame(self.general_ledger_form)
        ledger_named_columns = ('#', 'Сметка No', 'Име на сметка', 'ДЕБИТ нач.салдо', 'КРЕДИТ нач.салдо', 'ДЕБИТ обороти', 'КРЕДИТ обороти', 'ДЕБИТ кр.салдо', 'КРЕДИТ кр.салдо')
        self.g_ledger_chart = Treeview(self.g_ledger_frame, columns=ledger_named_columns, show='headings', height=30)
        for get_columns_name in ledger_named_columns:
            self.g_ledger_chart.heading(get_columns_name, text=get_columns_name)
        self.g_ledger_chart.grid(row=0, column=0)
        self.g_ledger_frame.grid(row=1, column=0)
        self.y_chart_scrollbar = Scrollbar(self.g_ledger_frame)
        self.g_ledger_chart.configure(yscrollcommand=self.y_chart_scrollbar.set)
        self.y_chart_scrollbar.grid(row=0, column=1, ipady=288)
        self.y_chart_scrollbar.configure(command=self.g_ledger_chart.yview)
        self.g_ledger_chart.column('#', minwidth=0, width=50)
        self.g_ledger_chart.column('Сметка No', minwidth=0, width=75)
        self.g_ledger_chart.column('ДЕБИТ нач.салдо', minwidth=0, width=90)
        self.g_ledger_chart.column('КРЕДИТ нач.салдо', minwidth=0, width=90)
        self.g_ledger_chart.column('ДЕБИТ обороти', minwidth=0, width=90)
        self.g_ledger_chart.column('КРЕДИТ обороти', minwidth=0, width=90)
        self.g_ledger_chart.column('ДЕБИТ кр.салдо', minwidth=0, width=90)
        self.g_ledger_chart.column('КРЕДИТ кр.салдо', minwidth=0, width=90)
        self.g_ledger_chart.bind(self.fetch_info_accounts())
        self.buttons_frame = Frame(self.g_ledger_frame)
        self.buttons_frame.grid(row=0, column=2)
        self.choose_option = Button(self.buttons_frame, text='Избор', font=6, width=12, height=1, command=self.select_account)
        self.choose_option.grid(row=0, column=0, padx=20, pady=5)
        self.close_button = Button(self.buttons_frame, text='Изход', font=6, width=12, height=1, command=self.close_general_ledger)
        self.close_button.grid(row=1, column=0)

    def fetch_info_accounts(self):
        result_acc = conn_db.execute('SELECT * FROM accounts').fetchall()
        for row1 in result_acc:
            self.g_ledger_chart.insert("", END, values=row1)

    def select_account(self):
        self.index_account = self.g_ledger_chart.focus()
        self.selected_account = self.g_ledger_chart.item(self.index_account)
        self.accounts_choice = self.selected_account.get('values')

        self.debit_entry.delete(END, 0)
        self.debit_entry.insert(0, self.accounts_choice[1])
        # self.credit_entry.delete(END, 0)
        # self.credit_entry.insert(0, self.accounts_choice[1])
        self.general_ledger_form.destroy()

    def close_general_ledger(self):
        self.general_ledger_form.destroy()
